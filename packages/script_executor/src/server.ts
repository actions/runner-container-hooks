import * as grpc from '@grpc/grpc-js'
import * as protoLoader from '@grpc/proto-loader'
import { exec } from 'child_process'
import { join } from 'path'

// The types are generated by proto-loader-gen-types with the following command:
// ./node_modules/.bin/proto-loader-gen-types --longs=String --enums=String --defaults --oneofs --grpcLib=@grpc/grpc-js --outDir=proto/ ../proto/*.proto
import { ProtoGrpcType } from './proto/script_executor'
import { ScriptRequest } from './proto/script_executor/ScriptRequest'
import { ScriptResponse } from './proto/script_executor/ScriptResponse'

const PROTO_PATH = join(__dirname, './proto/script_executor.proto')

const packageDefinition = protoLoader.loadSync(PROTO_PATH, {
  keepCase: true,
  longs: String,
  enums: String,
  defaults: true,
  oneofs: true
})

/* tslint:disable:no-any */
const protoDescriptor = grpc.loadPackageDefinition(
  packageDefinition
) as unknown as ProtoGrpcType
const scriptExecutor = protoDescriptor.script_executor
const keepaliveOptions = {
  // If a client is idle for 30 seconds, send a GOAWAY
  'grpc.max_connection_idle_ms': 30_000,
  // If any connection is alive for more than 1 day, send a GOAWAY
  'grpc.max_connection_age_ms': 86400_000,
  // Allow 10 seconds for pending RPCs to complete before forcibly closing connections
  'grpc.max_connection_age_grace_ms': 10_000,
  // Ping the client every 10 seconds to ensure the connection is still active
  'grpc.keepalive_time_ms': 10_000,
  // Wait 5 seconds for the ping ack before assuming the connection is dead
  'grpc.keepalive_timeout_ms': 5_000
}

/**
 * Handler for the ScriptExecutor.ExecuteScript RPC.
 * Executes the provided script and streams the output, error, and exit code.
 *
 * @param call The gRPC call object.
 */
function executeScriptHandler(
  call: grpc.ServerWritableStream<ScriptRequest, ScriptResponse>
): void {
  const script = call.request.script as string
  const process = exec(script)

  process.stdout?.on('data', data => {
    console.log(`stdout: ${data}`)
    call.write({ output: data.toString() })
  })

  process.stderr?.on('data', data => {
    console.log(`stderr: ${data}`)
    call.write({ error: data.toString() })
  })

  process.on('close', code => {
    console.log(`child process exited with code ${code}`)
    call.write({ code: code as number })
    call.end()
  })
}

function main(): void {
  const server = new grpc.Server(keepaliveOptions)
  server.addService(scriptExecutor.ScriptExecutor.service, {
    ExecuteScript: executeScriptHandler
  })
  // TODO(quoct): Create and pass in a cert here to improve security.
  // As of now, only other job in the cluster can access it but we need to improve it.
  server.bindAsync(
    '0.0.0.0:50051',
    grpc.ServerCredentials.createInsecure(), // TODO(quoct): Change to create SSL.
    () => {
      server.start()
      console.log('Server running on port 50051')
    }
  )
}

main()
